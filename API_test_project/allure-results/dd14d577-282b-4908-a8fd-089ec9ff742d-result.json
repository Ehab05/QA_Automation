{"name": "test_update_book_by_id", "status": "failed", "statusDetails": {"message": "AssertionError: {'id'[82 chars]t': 'U4G+Y2H5', 'publishDate': '2040-12-09T12:24:41.230+00:00'} != {'id'[82 chars]t': 'U4G+Y2H5', 'publishDate': '2040-12-09T12:24:41.23+00:00'}\n  {'description': 'xz</xo~O',\n   'excerpt': 'U4G+Y2H5',\n   'id': 199,\n   'pageCount': 11659,\n-  'publishDate': '2040-12-09T12:24:41.230+00:00',\n?                                        -\n\n+  'publishDate': '2040-12-09T12:24:41.23+00:00',\n   'title': \"Y`wR6D'A\"}", "trace": "self = <API_test_project_part_b.test.api.test_fake_rest_api_books.TestFakeRestAPIBooks testMethod=test_update_book_by_id>\n\n    def test_update_book_by_id(self):\n        \"\"\"\n            Test case: 015\n            Verify successful update of a book by its ID with valid data\n        \"\"\"\n        # initialize author from performing HTTP requests\n        book = Books(self._request)\n        # Generating a random book ID within the accepted range\n        book_id = Utils().generate_random_number_within_range(tuple(self._config[\"book_id_range\"]))\n    \n        # Generating data for updating the book with the given id\n        update_book = BookEntity().updated_book_by_id(book_id)\n        # Updating new data for the book\n        response = book.update_book_by_id(book_id, update_book)\n    \n        # Asserting the response status code\n        self.assertEqual(200, response.status_code)\n        # Asserting if the response body match the newly updated data\n>       self.assertDictEqual(update_book, response.data)\nE       AssertionError: {'id'[82 chars]t': 'U4G+Y2H5', 'publishDate': '2040-12-09T12:24:41.230+00:00'} != {'id'[82 chars]t': 'U4G+Y2H5', 'publishDate': '2040-12-09T12:24:41.23+00:00'}\nE         {'description': 'xz</xo~O',\nE          'excerpt': 'U4G+Y2H5',\nE          'id': 199,\nE          'pageCount': 11659,\nE       -  'publishDate': '2040-12-09T12:24:41.230+00:00',\nE       ?                                        -\nE       \nE       +  'publishDate': '2040-12-09T12:24:41.23+00:00',\nE          'title': \"Y`wR6D'A\"}\n\ntest\\api\\test_fake_rest_api_books.py:88: AssertionError"}, "description": "\n            Test case: 015\n            Verify successful update of a book by its ID with valid data\n        ", "attachments": [{"name": "stdout", "source": "10222b3f-e1a0-4e4d-848f-6ad1db31f186-attachment.txt", "type": "text/plain"}], "start": 1721901964833, "stop": 1721901965269, "uuid": "376c97b0-d8b4-4603-84f9-974142a1d3c8", "historyId": "98919a18d506992a60d668be75f40844", "testCaseId": "98919a18d506992a60d668be75f40844", "fullName": "test.api.test_fake_rest_api_books.TestFakeRestAPIBooks#test_update_book_by_id", "labels": [{"name": "parentSuite", "value": "test.api"}, {"name": "suite", "value": "test_fake_rest_api_books"}, {"name": "subSuite", "value": "TestFakeRestAPIBooks"}, {"name": "host", "value": "DESKTOP"}, {"name": "thread", "value": "13220-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.api.test_fake_rest_api_books"}]}